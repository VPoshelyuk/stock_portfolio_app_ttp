{"ast":null,"code":"var _jsxFileName = \"/Users/slavaP/Desktop/TTP/stock_portfolio_frontend/src/Portfolio.js\";\nimport React, { Fragment } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport { setUser, updateBalance } from './redux/actions/user_actions';\nimport Noty from 'noty';\nimport \"../node_modules/noty/lib/noty.css\";\nimport \"../node_modules/noty/lib/themes/mint.css\";\n\nclass Portfolio extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ticker: \"\",\n      quantity: \"\",\n      current_buy: {}\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      fetch(\"http://localhost:3000/api/v1/search\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({ ...this.state,\n          user_balance: this.props.currentUser.balance\n        })\n      }).then(res => res.json()).then(response => {\n        console.log(response);\n\n        if (response.error) {\n          new Noty({\n            text: `${response.error}`,\n            layout: \"bottomRight\",\n            type: \"alert\",\n            timeout: 5000,\n            progressBar: false,\n            closeWith: [\"click\", \"button\"]\n          }).show();\n        } else {\n          this.setState({\n            current_buy: {\n              stock_info: response.stock_info,\n              new_balance: response.new_balance\n            }\n          });\n          let notif = new Noty({\n            text: `${response.message}`,\n            layout: \"bottomRight\",\n            buttons: [Noty.button('YES', 'btn btn-success', () => this.handleConfirmation(notif)), Noty.button('NO', 'btn btn-error', function () {\n              notif.close();\n            })]\n          }).show();\n        }\n      });\n    };\n\n    this.handleConfirmation = notif => {\n      fetch(\"http://localhost:3000/api/v1/user_stocks\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user_id: this.props.currentUser.id,\n          ticker: this.state.ticker,\n          quantity: this.state.quantity,\n          price: this.state.current_buy.stock_info.latestPrice,\n          status: \"buy\"\n        })\n      }).then(res => res.json()).then(response => {\n        if (response.errors) {\n          response.errors.forEach(error => {\n            new Noty({\n              text: `${error}`,\n              layout: \"bottomRight\",\n              type: \"alert\",\n              timeout: 5000,\n              progressBar: false,\n              closeWith: [\"click\", \"button\"]\n            }).show();\n          });\n        } else {\n          new Noty({\n            text: `Successfully bought ${this.state.quantity} stocks of ${this.state.ticker}`,\n            layout: \"bottomRight\",\n            type: \"success\",\n            timeout: 5000,\n            progressBar: false,\n            closeWith: [\"click\", \"button\"]\n          }).show();\n        }\n      });\n      fetch(`http://localhost:3000/api/v1/users/${this.props.currentUser.id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n          balance: this.state.current_buy.new_balance\n        })\n      }).then(res => res.json()).then(response => {\n        if (response.errors) {\n          response.errors.forEach(error => {\n            new Noty({\n              text: `${error}`,\n              layout: \"bottomRight\",\n              type: \"alert\",\n              timeout: 5000,\n              progressBar: false,\n              closeWith: [\"click\", \"button\"]\n            }).show();\n          });\n        } else {\n          this.props.updateBalance(response.new_balance);\n          notif.close();\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:3000/api/v1/user_all\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user_id: this.props.currentUser\n      })\n    }).then(res => res.json()).then(response => {\n      console.log(response);\n\n      if (response.error) {\n        new Noty({\n          text: `${response.error}`,\n          layout: \"bottomRight\",\n          type: \"alert\",\n          timeout: 5000,\n          progressBar: false,\n          closeWith: [\"click\", \"button\"]\n        }).show();\n      } else {\n        this.setState({\n          current_buy: {\n            stock_info: response.stock_info,\n            new_balance: response.new_balance\n          }\n        });\n        let notif = new Noty({\n          text: `${response.message}`,\n          layout: \"bottomRight\",\n          buttons: [Noty.button('YES', 'btn btn-success', () => this.handleConfirmation(notif)), Noty.button('NO', 'btn btn-error', function () {\n            notif.close();\n          })]\n        }).show();\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, this.props.currentUser ? React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"portfolio_main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"stocks_info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"buy_info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"buy_form\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"form_name\",\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Cash - $\", this.props.currentUser.balance), React.createElement(\"input\", {\n      className: \"input\",\n      style: {\n        margin: \"10px auto\"\n      },\n      type: \"text\",\n      name: \"ticker\",\n      value: this.state.ticker,\n      onChange: this.handleChange,\n      placeholder: \"Ticker\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"input\",\n      style: {\n        margin: \"10px auto\"\n      },\n      type: \"text\",\n      name: \"quantity\",\n      value: this.state.quantity,\n      onChange: this.handleChange,\n      placeholder: \"Qty.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"submit_button\",\n      style: {\n        margin: \"10%\"\n      },\n      type: \"submit\",\n      value: \"Buy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }))))) : React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, \"Loading...\")));\n  }\n\n}\n\nfunction msp(state) {\n  return {\n    currentUser: state.currentUser\n  };\n}\n\nexport default connect(msp, {\n  setUser,\n  updateBalance\n})(Portfolio);","map":{"version":3,"sources":["/Users/slavaP/Desktop/TTP/stock_portfolio_frontend/src/Portfolio.js"],"names":["React","Fragment","Redirect","connect","setUser","updateBalance","Noty","Portfolio","Component","state","ticker","quantity","current_buy","handleChange","event","setState","target","name","value","handleSubmit","e","preventDefault","fetch","method","headers","body","JSON","stringify","user_balance","props","currentUser","balance","then","res","json","response","console","log","error","text","layout","type","timeout","progressBar","closeWith","show","stock_info","new_balance","notif","message","buttons","button","handleConfirmation","close","user_id","id","price","latestPrice","status","errors","forEach","componentDidMount","render","margin","msp"],"mappings":"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","sourcesContent":["import React, {Fragment} from \"react\";\nimport { Redirect } from \"react-router-dom\"\nimport { connect } from 'react-redux'\nimport { setUser, updateBalance } from './redux/actions/user_actions'\n\nimport Noty from 'noty';  \nimport \"../node_modules/noty/lib/noty.css\";  \nimport \"../node_modules/noty/lib/themes/mint.css\"; \n\nclass Portfolio extends React.Component{\n    state = {\n        ticker: \"\",\n        quantity: \"\",\n        current_buy: {}\n    }\n\n    componentDidMount(){\n        fetch(\"http://localhost:3000/api/v1/user_all\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            body: JSON.stringify({user_id: this.props.currentUser})\n        })\n        .then(res => res.json())\n        .then(response => {\n            console.log(response)\n            if(response.error){\n                new Noty({  \n                    text: `${response.error}`,\n                    layout: \"bottomRight\",\n                    type: \"alert\",\n                    timeout: 5000,\n                    progressBar: false,\n                    closeWith: [\"click\", \"button\"]\n                }).show()\n            } else {\n                this.setState({\n                    current_buy: {\n                        stock_info: response.stock_info,\n                        new_balance: response.new_balance\n                    }\n                })\n                let notif = new Noty({  \n                    text: `${response.message}`,\n                    layout: \"bottomRight\",\n                    buttons: [\n                        Noty.button('YES', 'btn btn-success', () => this.handleConfirmation(notif)),\n                        Noty.button('NO', 'btn btn-error', function () {notif.close()})\n                      ]\n                  }).show()\n            }\n        })\n    }\n\n    handleChange = (event) => {\n        this.setState({\n          [event.target.name]: event.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        fetch(\"http://localhost:3000/api/v1/search\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            body: JSON.stringify({...this.state, user_balance: this.props.currentUser.balance})\n        })\n        .then(res => res.json())\n        .then(response => {\n            console.log(response)\n            if(response.error){\n                new Noty({  \n                    text: `${response.error}`,\n                    layout: \"bottomRight\",\n                    type: \"alert\",\n                    timeout: 5000,\n                    progressBar: false,\n                    closeWith: [\"click\", \"button\"]\n                }).show()\n            } else {\n                this.setState({\n                    current_buy: {\n                        stock_info: response.stock_info,\n                        new_balance: response.new_balance\n                    }\n                })\n                let notif = new Noty({  \n                    text: `${response.message}`,\n                    layout: \"bottomRight\",\n                    buttons: [\n                        Noty.button('YES', 'btn btn-success', () => this.handleConfirmation(notif)),\n                        Noty.button('NO', 'btn btn-error', function () {notif.close()})\n                      ]\n                  }).show()\n            }\n        })\n    }\n\n    handleConfirmation = (notif) => {\n        fetch(\"http://localhost:3000/api/v1/user_stocks\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            body: JSON.stringify({\n                user_id: this.props.currentUser.id,\n                ticker: this.state.ticker,\n                quantity: this.state.quantity,\n                price: this.state.current_buy.stock_info.latestPrice,\n                status: \"buy\"\n            })\n        })\n        .then(res => res.json())\n        .then(response => {\n            if(response.errors){\n                response.errors.forEach(error => {\n                    new Noty({  \n                        text: `${error}`,\n                        layout: \"bottomRight\",\n                        type: \"alert\",\n                        timeout: 5000,\n                        progressBar: false,\n                        closeWith: [\"click\", \"button\"]\n                    }).show()\n                });\n            } else {\n                new Noty({  \n                    text: `Successfully bought ${this.state.quantity} stocks of ${this.state.ticker}`,\n                    layout: \"bottomRight\",\n                    type: \"success\",\n                    timeout: 5000,\n                    progressBar: false,\n                    closeWith: [\"click\", \"button\"]\n                }).show()\n            }\n        })\n        fetch(`http://localhost:3000/api/v1/users/${this.props.currentUser.id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            body: JSON.stringify({\n                balance: this.state.current_buy.new_balance\n            })\n        })\n        .then(res => res.json())\n        .then(response => {\n            if(response.errors){\n                response.errors.forEach(error => {\n                    new Noty({  \n                        text: `${error}`,\n                        layout: \"bottomRight\",\n                        type: \"alert\",\n                        timeout: 5000,\n                        progressBar: false,\n                        closeWith: [\"click\", \"button\"]\n                    }).show()\n                });\n            } else {\n                this.props.updateBalance(response.new_balance)\n                notif.close()\n            }\n        })\n    }\n\n    render(){\n        return (\n            <Fragment>\n                {this.props.currentUser?\n                    <Fragment>\n                        <div className=\"portfolio_main\">\n                            <div className=\"stocks_info\">\n                            \n                            </div>\n                            <div className=\"buy_info\">\n                                <form className=\"buy_form\" onSubmit={this.handleSubmit}>\n                                <p className=\"form_name\" align=\"center\" >Cash - ${this.props.currentUser.balance}</p>\n                                    <input \n                                        className=\"input\"\n                                        style={{margin: \"10px auto\"}}\n                                        type=\"text\" \n                                        name=\"ticker\" \n                                        value={this.state.ticker} \n                                        onChange={this.handleChange} \n                                        placeholder=\"Ticker\" \n                                    />\n                                    <input \n                                        className=\"input\"\n                                        style={{margin: \"10px auto\"}} \n                                        type=\"text\"\n                                        name=\"quantity\" \n                                        value={this.state.quantity} \n                                        onChange={this.handleChange} \n                                        placeholder=\"Qty.\" \n                                    />\n                                    <input \n                                        className=\"submit_button\" \n                                        style={{margin: \"10%\"}}\n                                        type=\"submit\" \n                                        value=\"Buy\" \n                                    />\n                                </form>\n                            </div>\n                        </div>\n                    </Fragment>\n                    :\n                    <Fragment>\n                        <h1 align=\"center\">Loading...</h1>\n                    </Fragment>\n\n                }\n            </Fragment>\n        );\n    }\n}\n\nfunction msp(state){\n    return {\n      currentUser: state.currentUser\n    }\n  }\n  \n  export default connect(msp, {setUser, updateBalance})(Portfolio)\n"]},"metadata":{},"sourceType":"module"}