{"ast":null,"code":"var _jsxFileName = \"/Users/slavaP/Desktop/labs/=MOD4/practice/src/CardsContainer.js\";\nimport React from \"react\";\nimport Card from './Card';\nexport default class CardsContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      nearestEvents: [],\n      upcomingEvents: [],\n      randomBoroughEvents: [],\n      loaded: false\n    };\n  }\n\n  componentDidMount() {\n    switch (this.props.id) {\n      case 1:\n        const options = {\n          enableHighAccuracy: true,\n          timeout: 10000,\n          maximumAge: 0\n        };\n\n        const success = pos => {\n          const crd = pos.coords;\n          fetch(\"http://localhost:3000/api/v1/nearest\", {\n            method: \"POST\",\n            headers: {\n              \"accepts\": \"application/json\",\n              \"content-type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              latitude: crd.latitude,\n              longitude: crd.longitude\n            })\n          }).then(resp => resp.json()).then(data => this.setState({\n            nearestEvents: data.Events.Event !== undefined ? data.Events.Event.slice(0, 5) : [],\n            loaded: true\n          }));\n        };\n\n        const error = err => {\n          console.warn(\"ERROR(\".concat(err.code, \"): \").concat(err.message));\n        };\n\n        navigator.geolocation.getCurrentPosition(success, error, options);\n        break;\n\n      case 2:\n        fetch(\"http://localhost:3000/api/v1/free\").then(resp => resp.json()).then(data => this.setState({\n          nearestEvents: data.Events.Event !== undefined ? data.Events.Event.slice(0, 5) : [],\n          loaded: true\n        }));\n        break;\n\n      case 3:\n        fetch(\"http://localhost:3000/api/v1/nearest\", {\n          method: \"POST\",\n          headers: {\n            \"accepts\": \"application/json\",\n            \"content-type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            latitude: this.props.lat,\n            longitude: this.props.long\n          })\n        }).then(resp => resp.json()).then(data => this.setState({\n          nearestEvents: data.Events.Event.slice(0, 5),\n          loaded: true\n        }));\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, this.state.loaded ? React.createElement(\"div\", {\n      className: \"cards\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, this.state.nearestEvents !== undefined ? this.state.nearestEvents.map(event => React.createElement(Card, {\n      key: event.Name,\n      event: event,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    })) : null, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"More info\")) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Loading...\")));\n  }\n\n}","map":{"version":3,"sources":["/Users/slavaP/Desktop/labs/=MOD4/practice/src/CardsContainer.js"],"names":["React","Card","CardsContainer","Component","state","nearestEvents","upcomingEvents","randomBoroughEvents","loaded","componentDidMount","props","id","options","enableHighAccuracy","timeout","maximumAge","success","pos","crd","coords","fetch","method","headers","body","JSON","stringify","latitude","longitude","then","resp","json","data","setState","Events","Event","undefined","slice","error","err","console","warn","code","message","navigator","geolocation","getCurrentPosition","lat","long","render","map","event","Name"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Card from './Card'\n\nexport default class CardsContainer extends React.Component{\n    state = {\n        nearestEvents: [],\n        upcomingEvents: [],\n        randomBoroughEvents: [],\n        loaded: false\n    }\n\n    componentDidMount(){\n        switch (this.props.id) {\n            case 1:\n                const options = {\n                    enableHighAccuracy: true,\n                    timeout: 10000,\n                    maximumAge: 0\n                }\n                const success = pos => {\n                    const crd = pos.coords;\n                    fetch(`http://localhost:3000/api/v1/nearest`,{\n                        method: \"POST\",\n                        headers:{\n                            \"accepts\": \"application/json\",\n                            \"content-type\": \"application/json\"\n                        },\n                        body:JSON.stringify({\n                            latitude: crd.latitude,\n                            longitude: crd.longitude\n                        })\n                    })\n                    .then(resp => resp.json())\n                    .then(data => this.setState({nearestEvents: data.Events.Event !== undefined ? data.Events.Event.slice(0, 5) : [], loaded: true}))\n                }\n                    \n                const error = err => {\n                    console.warn(`ERROR(${err.code}): ${err.message}`);\n                }\n                \n                navigator.geolocation.getCurrentPosition(success, error, options);\n                break;\n            case 2:\n                fetch(`http://localhost:3000/api/v1/free`)\n                .then(resp => resp.json())\n                .then(data => this.setState({nearestEvents: data.Events.Event !== undefined ? data.Events.Event.slice(0, 5) : [], loaded: true}))\n                break;\n            case 3:\n                fetch(`http://localhost:3000/api/v1/nearest`,{\n                    method: \"POST\",\n                    headers:{\n                        \"accepts\": \"application/json\",\n                        \"content-type\": \"application/json\"\n                    },\n                    body:JSON.stringify({\n                        latitude: this.props.lat,\n                        longitude: this.props.long\n                    })\n                })\n                .then(resp => resp.json())\n                .then(data => this.setState({nearestEvents: data.Events.Event.slice(0, 5), loaded: true}))\n                break;\n            default:\n                break;\n        }\n    } \n\n    render(){\n        return (\n            <div>   \n                {this.state.loaded ?\n                <div className=\"cards\">\n                    {this.state.nearestEvents !== undefined ? this.state.nearestEvents.map(event => <Card key={event.Name} event={event}/>) : null}\n                    <p>More info</p>\n                </div>\n                :\n                <div>\n                    <h1>Loading...</h1>\n                </div>\n                    \n            \n                }\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}