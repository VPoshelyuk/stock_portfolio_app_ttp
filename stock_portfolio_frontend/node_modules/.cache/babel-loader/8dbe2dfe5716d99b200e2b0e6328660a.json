{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\n\nvar qr = require('qr.js');\n\nimport ReactDOM from 'react-dom';\n\nvar QrCode = function (_Component) {\n  _inherits(QrCode, _Component);\n\n  function QrCode(props) {\n    _classCallCheck(this, QrCode);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.setRef = function (ctx) {\n      _this.ctx = ctx.getContext(\"2d\");\n      var qrcode = qr(_this.props.value);\n      var size = _this.props.size === undefined ? '100' : _this.props.size;\n      var fgColor = _this.props.foreground === undefined ? '#000000' : _this.props.foreground;\n      var bgColor = _this.props.background === undefined ? '#FFFFFF' : _this.props.background;\n      var margin = _this.props.margin === undefined ? 10 : parseInt(_this.props.margin);\n      var canvas = document.createElement('canvas');\n      canvas.width = size;\n      canvas.height = size;\n      var cells = qrcode.modules;\n\n      if (cells === null) {\n        return;\n      }\n\n      var tileW = (size - 2 * margin) / cells.length;\n      var tileH = (size - 2 * margin) / cells.length;\n      _this.ctx.fillStyle = bgColor;\n\n      _this.ctx.fillRect(0, 0, size + 2 * margin, size + 2 * margin);\n\n      for (var r = 0; r < cells.length; ++r) {\n        var row = cells[r];\n\n        for (var c = 0; c < row.length; ++c) {\n          if (row[c]) {\n            _this.ctx.fillStyle = row[c] ? fgColor : bgColor;\n            var w = Math.ceil((c + 1) * tileW) - Math.floor(c * tileW);\n            var h = Math.ceil((r + 1) * tileH) - Math.floor(r * tileH);\n\n            _this.ctx.fillRect(Math.round(c * tileW) + margin, Math.round(r * tileH) + margin, w, h);\n          }\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  QrCode.prototype.render = function render() {\n    return React.createElement('canvas', {\n      width: this.props.size === undefined ? '100' : this.props.size,\n      height: this.props.size === undefined ? '100' : this.props.size,\n      ref: this.setRef\n    });\n  };\n\n  return QrCode;\n}(Component);\n\nexport { QrCode as default };","map":null,"metadata":{},"sourceType":"module"}