{"ast":null,"code":"import _defineProperty from \"/Users/slavaP/Desktop/labs/=MOD4/practice/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/slavaP/Desktop/labs/=MOD4/practice/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/slavaP/Desktop/labs/=MOD4/practice/src/Map.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport ReactMapGL, { GeolocateControl, Marker } from 'react-map-gl'; // import ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl'\n\nimport 'mapbox-gl/dist/mapbox-gl.css';\nconst TOKEN = 'pk.eyJ1Ijoidi1wYXNoYWxpdWsiLCJhIjoiY2szaGZtMzF1MGM0aDNjbXN3emd2bm9qaiJ9.FDxxP93p6jNROtLNi3TgcQ';\nconst geolocateStyle = {\n  float: 'left',\n  // marginTop: '150px',\n  // marginLeft: '20px',\n  padding: '10px'\n}; // const markerList=[\n//   {lat: 17.441013,\n//   long: 78.391796,\n//   name: “ABC Hospitals”,\n//   info: 10},\n//   { lat:17.442889,\n//   long: 78.396873,\n//   name: “XYZ Hospitals”,\n//   info: 20},\n//   {lat: 17.441681,\n//   long: 78.394357,\n//   name: “NRI Hospitals”,\n//   info: 10}\n//   ];\n\nconst Map = () => {\n  const _useState = useState({\n    width: 1380,\n    height: 700,\n    latitude: 40.75,\n    longitude: -74.0060,\n    //NYC Coordinates \n    zoom: 10\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        viewport = _useState2[0],\n        setViewPort = _useState2[1];\n\n  const options = {\n    enableHighAccuracy: true,\n    timeout: 5000,\n    maximumAge: 0\n  };\n\n  function success(pos) {\n    var crd = pos.coords;\n    console.log('Your current position is:');\n    console.log(\"Latitude : \".concat(crd.latitude));\n    console.log(\"Longitude: \".concat(crd.longitude));\n    console.log(\"More or less \".concat(crd.accuracy, \" meters.\"));\n  }\n\n  function error(err) {\n    console.warn(\"ERROR(\".concat(err.code, \"): \").concat(err.message));\n  }\n\n  navigator.geolocation.getCurrentPosition(success, error, options);\n\n  const _onViewportChange = viewport => setViewPort(_objectSpread({}, viewport, {\n    transitionDuration: 10\n  }));\n\n  const getMarkerInfo = e => {\n    e.persist();\n    console.log(e.target.parentNode);\n  };\n\n  return React.createElement(\"div\", {\n    style: {\n      margin: \"auto\",\n      width: \"1380px\",\n      height: \"400px\",\n      overflow: \"hidden\",\n      borderRadius: \"25px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(ReactMapGL, Object.assign({}, viewport, {\n    mapboxApiAccessToken: TOKEN,\n    mapStyle: \"mapbox://styles/mapbox/streets-v11\",\n    onViewportChange: _onViewportChange,\n    maxZoom: 13,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(Marker, {\n    latitude: 40.75,\n    longitude: -74,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    onClick: getMarkerInfo,\n    id: \"FiDi\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"l\")), React.createElement(GeolocateControl, {\n    style: geolocateStyle,\n    positionOptions: {\n      enableHighAccuracy: true\n    } // onViewportChange={\n    //     const latitude = position.coords.latitude;\n    //     const longitude = position.coords.longitude;\n    //     console.log('lat, lng', latitude, longitude);\n    // }\n    // }\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  })));\n};\n\nexport default Map;","map":{"version":3,"sources":["/Users/slavaP/Desktop/labs/=MOD4/practice/src/Map.js"],"names":["React","useState","useEffect","ReactMapGL","GeolocateControl","Marker","TOKEN","geolocateStyle","float","padding","Map","width","height","latitude","longitude","zoom","viewport","setViewPort","options","enableHighAccuracy","timeout","maximumAge","success","pos","crd","coords","console","log","accuracy","error","err","warn","code","message","navigator","geolocation","getCurrentPosition","_onViewportChange","transitionDuration","getMarkerInfo","e","persist","target","parentNode","margin","overflow","borderRadius"],"mappings":"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","sourcesContent":["import React,{ useState, useEffect } from 'react'\nimport ReactMapGL,{GeolocateControl, Marker} from 'react-map-gl'\n// import ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl'\nimport 'mapbox-gl/dist/mapbox-gl.css'\n\nconst TOKEN='pk.eyJ1Ijoidi1wYXNoYWxpdWsiLCJhIjoiY2szaGZtMzF1MGM0aDNjbXN3emd2bm9qaiJ9.FDxxP93p6jNROtLNi3TgcQ'\n\nconst geolocateStyle = {\n  float: 'left',\n  // marginTop: '150px',\n  // marginLeft: '20px',\n  padding: '10px'\n};\n\n// const markerList=[\n//   {lat: 17.441013,\n//   long: 78.391796,\n//   name: “ABC Hospitals”,\n//   info: 10},\n//   { lat:17.442889,\n//   long: 78.396873,\n//   name: “XYZ Hospitals”,\n//   info: 20},\n//   {lat: 17.441681,\n//   long: 78.394357,\n//   name: “NRI Hospitals”,\n//   info: 10}\n//   ];\n\nconst Map = () =>{\n\n  const [viewport, setViewPort ] = useState({\n    width: 1380,\n    height: 700,\n    latitude: 40.75,\n    longitude: -74.0060, //NYC Coordinates \n    zoom: 10\n  })\n\n\n  const options = {\n    enableHighAccuracy: true,\n    timeout: 5000,\n    maximumAge: 0\n  };\n  \n  function success(pos) {\n    var crd = pos.coords;\n  \n    console.log('Your current position is:');\n    console.log(`Latitude : ${crd.latitude}`);\n    console.log(`Longitude: ${crd.longitude}`);\n    console.log(`More or less ${crd.accuracy} meters.`);\n  }\n  \n  function error(err) {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  }\n  \n  navigator.geolocation.getCurrentPosition(success, error, options);\n\n\n\n  const _onViewportChange = viewport => setViewPort({...viewport, transitionDuration: 10})\n\n  const getMarkerInfo = e => {\n    e.persist()\n    console.log(e.target.parentNode)\n  }\n  \n  return (\n    <div style={{ margin: \"auto\", width: \"1380px\", height: \"400px\", overflow: \"hidden\", borderRadius: \"25px\"}}>\n      <ReactMapGL\n        {...viewport}\n        mapboxApiAccessToken={TOKEN}\n        mapStyle=\"mapbox://styles/mapbox/streets-v11\"\n        onViewportChange={_onViewportChange}\n        maxZoom={13}\n      >\n        <Marker latitude={40.75} longitude={-74} >\n          <p onClick={getMarkerInfo} id=\"FiDi\">l</p>\n        </Marker>\n        <GeolocateControl\n          style={geolocateStyle}\n          positionOptions={{enableHighAccuracy: true}}\n          // onViewportChange={\n          //     const latitude = position.coords.latitude;\n          //     const longitude = position.coords.longitude;\n          //     console.log('lat, lng', latitude, longitude);\n          // }\n          // }\n        />\n      </ReactMapGL>\n    </div>\n\n  )\n}\n\nexport default Map\n\n"]},"metadata":{},"sourceType":"module"}