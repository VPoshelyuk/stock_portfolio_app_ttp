{"ast":null,"code":"var _jsxFileName = \"/Users/slavaP/Desktop/labs/=MOD4/practice/src/Map.js\";\nimport React from 'react';\nimport ReactMapGL, { GeolocateControl, Marker } from 'react-map-gl'; // import ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl'\n\nimport 'mapbox-gl/dist/mapbox-gl.css';\nconst TOKEN = 'pk.eyJ1Ijoidi1wYXNoYWxpdWsiLCJhIjoiY2szaGZtMzF1MGM0aDNjbXN3emd2bm9qaiJ9.FDxxP93p6jNROtLNi3TgcQ';\nconst geolocateStyle = {\n  float: 'left',\n  padding: '10px'\n};\n\nclass Map extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      viewport: {\n        width: 1380,\n        height: 400,\n        latitude: 40.75,\n        longitude: -74.0060,\n        //NYC Coordinates \n        zoom: 10\n      },\n      areas: []\n    };\n\n    this.getMarkerInfo = e => {\n      e.persist();\n      this.props.passCoords(e.target.id, e.target.dataset.lat, e.target.dataset.long);\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:4000/areas').then(resp => resp.json()).then(fetchedAreas => {\n      this.setState({\n        areas: fetchedAreas\n      });\n      this.props.selectRandArea(fetchedAreas[Math.floor(Math.random() * fetchedAreas.length)]);\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        margin: \"auto\",\n        maxWidth: \"1380px\",\n        maxHeight: \"400px\",\n        overflow: \"hidden\",\n        borderRadius: \"25px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(ReactMapGL, Object.assign({}, this.state.viewport, {\n      mapboxApiAccessToken: TOKEN,\n      mapStyle: \"mapbox://styles/mapbox/streets-v11\",\n      onViewportChange: viewport => this.setState({\n        viewport\n      }),\n      maxZoom: 13,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), this.state.areas.map(area => React.createElement(Marker, {\n      key: area.id,\n      latitude: area.geometry.coordinates[1],\n      longitude: area.geometry.coordinates[0],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      style: {\n        fontSize: \"8px\"\n      },\n      \"data-lat\": area.geometry.coordinates[1],\n      \"data-long\": area.geometry.coordinates[0],\n      onClick: this.getMarkerInfo,\n      id: area.area,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"\\uD83D\\uDDBC\"))), React.createElement(GeolocateControl, {\n      style: geolocateStyle,\n      positionOptions: {\n        enableHighAccuracy: true\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/slavaP/Desktop/labs/=MOD4/practice/src/Map.js"],"names":["React","ReactMapGL","GeolocateControl","Marker","TOKEN","geolocateStyle","float","padding","Map","Component","state","viewport","width","height","latitude","longitude","zoom","areas","getMarkerInfo","e","persist","props","passCoords","target","id","dataset","lat","long","componentDidMount","fetch","then","resp","json","fetchedAreas","setState","selectRandArea","Math","floor","random","length","render","margin","maxWidth","maxHeight","overflow","borderRadius","map","area","geometry","coordinates","fontSize","enableHighAccuracy"],"mappings":"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","sourcesContent":["import React from 'react'\nimport ReactMapGL,{GeolocateControl, Marker} from 'react-map-gl'\n// import ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl'\nimport 'mapbox-gl/dist/mapbox-gl.css'\n\nconst TOKEN='pk.eyJ1Ijoidi1wYXNoYWxpdWsiLCJhIjoiY2szaGZtMzF1MGM0aDNjbXN3emd2bm9qaiJ9.FDxxP93p6jNROtLNi3TgcQ'\n\nconst geolocateStyle = {\n  float: 'left',\n  padding: '10px'\n};\n\nclass Map extends React.Component{\n  state = {\n    viewport:{\n      width: 1380,\n      height: 400,\n      latitude: 40.75,\n      longitude: -74.0060, //NYC Coordinates \n      zoom: 10\n    },\n    areas: []\n  }\n\n  componentDidMount(){\n    fetch('http://localhost:4000/areas')\n    .then(resp => resp.json())\n    .then(fetchedAreas => {\n      this.setState({areas: fetchedAreas})\n      this.props.selectRandArea(fetchedAreas[ Math.floor(Math.random() * fetchedAreas.length)])\n    })\n  }\n\n  getMarkerInfo = e => {\n    e.persist()\n    this.props.passCoords(e.target.id, e.target.dataset.lat, e.target.dataset.long)\n  }\n  \n  render(){\n    return (\n      <div style={{ margin: \"auto\", maxWidth: \"1380px\", maxHeight: \"400px\", overflow: \"hidden\", borderRadius: \"25px\"}}>\n        <ReactMapGL\n          {...this.state.viewport}\n          mapboxApiAccessToken={TOKEN}\n          mapStyle=\"mapbox://styles/mapbox/streets-v11\"\n          onViewportChange={viewport => this.setState({viewport})}\n          maxZoom={13}\n        >\n          {this.state.areas.map(area => <Marker key={area.id} latitude={area.geometry.coordinates[1]} longitude={area.geometry.coordinates[0]}>\n            <p style={{fontSize: \"8px\"}} data-lat={area.geometry.coordinates[1]} data-long={area.geometry.coordinates[0]} onClick={this.getMarkerInfo} id={area.area}>ğŸ–¼</p>\n          </Marker>)}\n        \n          <GeolocateControl\n            style={geolocateStyle}\n            positionOptions={{enableHighAccuracy: true}}\n          />\n        </ReactMapGL>\n      </div>\n  \n    )\n  }\n}\n\nexport default Map\n\n"]},"metadata":{},"sourceType":"module"}