{"ast":null,"code":"import _defineProperty from \"/Users/slavaP/Desktop/labs/=MOD4/practice/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/slavaP/Desktop/labs/=MOD4/practice/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/slavaP/Desktop/labs/=MOD4/practice/src/Map.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport MapGL, { GeolocateControl, Marker } from 'react-map-gl'; // import ReactMapboxGl, { Layer, Feature, GeolocateControl } from 'react-mapbox-gl'\n\nimport 'mapbox-gl/dist/mapbox-gl.css';\nconst TOKEN = 'pk.eyJ1Ijoidi1wYXNoYWxpdWsiLCJhIjoiY2szaGZtMzF1MGM0aDNjbXN3emd2bm9qaiJ9.FDxxP93p6jNROtLNi3TgcQ';\nconst geolocateStyle = {\n  float: 'left',\n  marginTop: '150px',\n  marginLeft: '20px',\n  padding: '10px'\n};\n\nconst Map = () => {\n  const _useState = useState({\n    width: 1380,\n    height: 700,\n    latitude: 40.75,\n    longitude: -74.0060,\n    //NYC Coordinates \n    zoom: 10\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        viewport = _useState2[0],\n        setViewPort = _useState2[1];\n\n  const _onViewportChange = viewport => setViewPort(_objectSpread({}, viewport, {\n    transitionDuration: 10\n  }));\n\n  return React.createElement(\"div\", {\n    style: {\n      margin: \"auto\",\n      width: \"1380px\",\n      height: \"400px\",\n      overflow: \"hidden\",\n      borderRadius: \"25px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(MapGL, Object.assign({}, viewport, {\n    mapboxApiAccessToken: TOKEN,\n    mapStyle: \"mapbox://styles/mapbox/streets-v11\",\n    onViewportChange: _onViewportChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(GeolocateControl, {\n    style: geolocateStyle,\n    positionOptions: {\n      enableHighAccuracy: true\n    },\n    trackUserLocation: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  })));\n};\n\nexport default Map; // class Map extends React.Component {\n//   map;\n//   state = {\n//       active: options[0]\n//   }\n//   componentDidUpdate() {\n//     this.setFill();\n//   }\n//   componentDidMount() {\n//     this.map = new mapboxgl.Map({\n//       container: this.mapContainer,\n//       style: 'mapbox://styles/v-pashaliuk/ck3m12hat31my1dol309wge8p',\n//       center: [40.75,-74.0060],\n//       zoom: 10\n//     });\n//     this.map.on('load', () => {\n//       this.map.addSource('countries', {\n//         type: 'geojson',\n//         data\n//       });\n//       this.map.addLayer({\n//         id: 'countries',\n//         type: 'fill',\n//         source: 'countries'\n//       }, 'country-label-lg')\n//       this.setFill();\n//     });\n//   }\n//   setFill() {\n//     const { property, stops } = this.state.active;\n//     this.map.setPaintProperty('countries', 'fill-color', {\n//       property,\n//       stops\n//     });    \n//   }\n//   render() {\n//     const { name, description, stops, property } = this.state.active;\n//     const renderLegendKeys = (stop, i) => {\n//       return (\n//         <div key={i} className='txt-s'>\n//           <span className='mr6 round-full w12 h12 inline-block align-middle' style={{ backgroundColor: stop[1] }} />\n//           <span>{`${stop[0].toLocaleString()}`}</span>\n//         </div>\n//       );\n//     }\n//     const renderOptions = (option, i) => {\n//       return (\n//         <label key={i} className=\"toggle-container\">\n//           <input onChange={() => this.setState({ active: options[i] })} checked={option.property === property} name=\"toggle\" type=\"radio\" />\n//           <div className=\"toggle txt-s py3 toggle--active-white\">{option.name}</div>\n//         </label>\n//       );\n//     }\n//     return (\n//       <div>\n//         <div ref={el => this.mapContainer = el} className=\"absolute top right left bottom\" />\n//         <div className=\"toggle-group absolute top left ml12 mt12 border border--2 border--white bg-white shadow-darken10 z1\">\n//           {options.map(renderOptions)}\n//         </div>\n//         <div className=\"bg-white absolute bottom right mr12 mb24 py12 px12 shadow-darken10 round z1 wmax180\">\n//           <div className='mb6'>\n//             <h2 className=\"txt-bold txt-s block\">{name}</h2>\n//             <p className='txt-s color-gray'>{description}</p>\n//           </div>\n//           {stops.map(renderLegendKeys)}\n//         </div>\n//       </div>\n//     );\n//   }\n// }","map":{"version":3,"sources":["/Users/slavaP/Desktop/labs/=MOD4/practice/src/Map.js"],"names":["React","useState","MapGL","GeolocateControl","Marker","TOKEN","geolocateStyle","float","marginTop","marginLeft","padding","Map","width","height","latitude","longitude","zoom","viewport","setViewPort","_onViewportChange","transitionDuration","margin","overflow","borderRadius","enableHighAccuracy"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA+B,OAA/B;AACA,OAAOC,KAAP,IAAcC,gBAAd,EAAgCC,MAAhC,QAA6C,cAA7C,C,CACA;;AACA,OAAO,8BAAP;AAEA,MAAMC,KAAK,GAAC,gGAAZ;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,KAAK,EAAE,MADc;AAErBC,EAAAA,SAAS,EAAE,OAFU;AAGrBC,EAAAA,UAAU,EAAE,MAHS;AAIrBC,EAAAA,OAAO,EAAE;AAJY,CAAvB;;AAOA,MAAMC,GAAG,GAAG,MAAM;AAAA,oBAEiBV,QAAQ,CAAC;AACxCW,IAAAA,KAAK,EAAE,IADiC;AAExCC,IAAAA,MAAM,EAAE,GAFgC;AAGxCC,IAAAA,QAAQ,EAAE,KAH8B;AAIxCC,IAAAA,SAAS,EAAE,CAAC,OAJ4B;AAInB;AACrBC,IAAAA,IAAI,EAAE;AALkC,GAAD,CAFzB;AAAA;AAAA,QAETC,QAFS;AAAA,QAECC,WAFD;;AAWhB,QAAMC,iBAAiB,GAAGF,QAAQ,IAAIC,WAAW,mBAAKD,QAAL;AAAeG,IAAAA,kBAAkB,EAAE;AAAnC,KAAjD;;AAEA,SACE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkBT,MAAAA,KAAK,EAAE,QAAzB;AAAmCC,MAAAA,MAAM,EAAE,OAA3C;AAAoDS,MAAAA,QAAQ,EAAE,QAA9D;AAAwEC,MAAAA,YAAY,EAAE;AAAtF,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD,oBACMN,QADN;AAEE,IAAA,oBAAoB,EAAEZ,KAFxB;AAGE,IAAA,QAAQ,EAAC,oCAHX;AAIE,IAAA,gBAAgB,EAAEc,iBAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAME,oBAAC,gBAAD;AACE,IAAA,KAAK,EAAEb,cADT;AAEE,IAAA,eAAe,EAAE;AAACkB,MAAAA,kBAAkB,EAAE;AAArB,KAFnB;AAGE,IAAA,iBAAiB,EAAE,IAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF,CADF;AAiBD,CA9BD;;AAgCA,eAAeb,GAAf,C,CAIA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React,{ useState } from 'react'\nimport MapGL,{GeolocateControl, Marker} from 'react-map-gl'\n// import ReactMapboxGl, { Layer, Feature, GeolocateControl } from 'react-mapbox-gl'\nimport 'mapbox-gl/dist/mapbox-gl.css'\n\nconst TOKEN='pk.eyJ1Ijoidi1wYXNoYWxpdWsiLCJhIjoiY2szaGZtMzF1MGM0aDNjbXN3emd2bm9qaiJ9.FDxxP93p6jNROtLNi3TgcQ'\n\nconst geolocateStyle = {\n  float: 'left',\n  marginTop: '150px',\n  marginLeft: '20px',\n  padding: '10px'\n};\n\nconst Map = () => {\n\n  const [viewport, setViewPort ] = useState({\n    width: 1380,\n    height: 700,\n    latitude: 40.75,\n    longitude: -74.0060, //NYC Coordinates \n    zoom: 10\n  })\n\n\n  const _onViewportChange = viewport => setViewPort({...viewport, transitionDuration: 10})\n  \n  return (\n    <div style={{ margin: \"auto\", width: \"1380px\", height: \"400px\", overflow: \"hidden\", borderRadius: \"25px\"}}>\n      <MapGL\n        {...viewport}\n        mapboxApiAccessToken={TOKEN}\n        mapStyle=\"mapbox://styles/mapbox/streets-v11\"\n        onViewportChange={_onViewportChange}\n      >\n        <GeolocateControl\n          style={geolocateStyle}\n          positionOptions={{enableHighAccuracy: true}}\n          trackUserLocation={true}\n        />\n      </MapGL>\n    </div>\n\n  )\n}\n\nexport default Map\n\n\n\n// class Map extends React.Component {\n//   map;\n\n//   state = {\n//       active: options[0]\n//   }\n\n\n//   componentDidUpdate() {\n//     this.setFill();\n//   }\n\n//   componentDidMount() {\n//     this.map = new mapboxgl.Map({\n//       container: this.mapContainer,\n//       style: 'mapbox://styles/v-pashaliuk/ck3m12hat31my1dol309wge8p',\n//       center: [40.75,-74.0060],\n//       zoom: 10\n//     });\n\n//     this.map.on('load', () => {\n//       this.map.addSource('countries', {\n//         type: 'geojson',\n//         data\n//       });\n\n//       this.map.addLayer({\n//         id: 'countries',\n//         type: 'fill',\n//         source: 'countries'\n//       }, 'country-label-lg')\n\n//       this.setFill();\n//     });\n//   }\n\n//   setFill() {\n//     const { property, stops } = this.state.active;\n//     this.map.setPaintProperty('countries', 'fill-color', {\n//       property,\n//       stops\n//     });    \n//   }\n\n//   render() {\n//     const { name, description, stops, property } = this.state.active;\n//     const renderLegendKeys = (stop, i) => {\n//       return (\n//         <div key={i} className='txt-s'>\n//           <span className='mr6 round-full w12 h12 inline-block align-middle' style={{ backgroundColor: stop[1] }} />\n//           <span>{`${stop[0].toLocaleString()}`}</span>\n//         </div>\n//       );\n//     }\n\n//     const renderOptions = (option, i) => {\n//       return (\n//         <label key={i} className=\"toggle-container\">\n//           <input onChange={() => this.setState({ active: options[i] })} checked={option.property === property} name=\"toggle\" type=\"radio\" />\n//           <div className=\"toggle txt-s py3 toggle--active-white\">{option.name}</div>\n//         </label>\n//       );\n//     }\n\n//     return (\n//       <div>\n//         <div ref={el => this.mapContainer = el} className=\"absolute top right left bottom\" />\n//         <div className=\"toggle-group absolute top left ml12 mt12 border border--2 border--white bg-white shadow-darken10 z1\">\n//           {options.map(renderOptions)}\n//         </div>\n//         <div className=\"bg-white absolute bottom right mr12 mb24 py12 px12 shadow-darken10 round z1 wmax180\">\n//           <div className='mb6'>\n//             <h2 className=\"txt-bold txt-s block\">{name}</h2>\n//             <p className='txt-s color-gray'>{description}</p>\n//           </div>\n//           {stops.map(renderLegendKeys)}\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n"]},"metadata":{},"sourceType":"module"}