{"ast":null,"code":"var _jsxFileName = \"/Users/slavaP/Desktop/TTP/stock_portfolio_frontend/src/StocksContainer.js\";\nimport React, { Fragment } from \"react\";\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setUser, updatePortfolio, updateTransactions } from './redux/actions/user_actions';\nimport Noty from 'noty';\nimport \"../node_modules/noty/lib/noty.css\";\nimport \"../node_modules/noty/lib/themes/mint.css\";\nimport Stock from \"./Stock\";\n\nclass StocksContainer extends React.Component {\n  componentDidMount() {\n    if (this.props.mode === \"portfolio\") {\n      fetch(\"http://localhost:3000/api/v1/user_all\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user_id: this.props.currentUser.id\n        })\n      }).then(res => res.json()).then(response => {\n        console.log(response);\n\n        if (response.error) {\n          new Noty({\n            text: `${response.error}`,\n            layout: \"bottomRight\",\n            type: \"alert\",\n            timeout: 5000,\n            progressBar: false,\n            closeWith: [\"click\", \"button\"]\n          }).show();\n        } else {\n          this.props.updatePortfolio(response);\n        }\n      });\n    } else if (this.props.mode === \"transactions\") {\n      fetch(\"http://localhost:3000/api/v1/user_recent\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user_id: this.props.currentUser.id\n        })\n      }).then(res => res.json()).then(response => {\n        console.log(response);\n\n        if (response.error) {\n          new Noty({\n            text: `${response.error}`,\n            layout: \"bottomRight\",\n            type: \"alert\",\n            timeout: 5000,\n            progressBar: false,\n            closeWith: [\"click\", \"button\"]\n          }).show();\n        } else {\n          this.props.updateTransactions(response);\n        }\n      });\n    }\n  }\n\n  render() {\n    console.log(this.props);\n    return React.createElement(\"div\", {\n      className: \"stock_container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, this.props.portfolio ? React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, this.props.portfolio.map(stock => React.createElement(Stock, {\n      key: stock.ticker,\n      stock: stock,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }))) : React.createElement(\"h1\", {\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Loading...\"));\n  }\n\n}\n\nfunction msp(state) {\n  return {\n    currentUser: state.currentUser,\n    portfolio: state.portfolio\n  };\n}\n\nexport default connect(msp, {\n  setUser,\n  updatePortfolio,\n  updateTransactions\n})(StocksContainer);","map":{"version":3,"sources":["/Users/slavaP/Desktop/TTP/stock_portfolio_frontend/src/StocksContainer.js"],"names":["React","Fragment","Redirect","connect","setUser","updatePortfolio","updateTransactions","Noty","Stock","StocksContainer","Component","componentDidMount","props","mode","fetch","method","headers","body","JSON","stringify","user_id","currentUser","id","then","res","json","response","console","log","error","text","layout","type","timeout","progressBar","closeWith","show","render","portfolio","map","stock","ticker","msp","state"],"mappings":"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","sourcesContent":["import React, {Fragment} from \"react\";\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { setUser, updatePortfolio, updateTransactions } from './redux/actions/user_actions'\n\nimport Noty from 'noty';  \nimport \"../node_modules/noty/lib/noty.css\";  \nimport \"../node_modules/noty/lib/themes/mint.css\";\nimport Stock from \"./Stock\";\n\nclass StocksContainer extends React.Component{\n    componentDidMount(){\n        if(this.props.mode === \"portfolio\"){\n            fetch(\"http://localhost:3000/api/v1/user_all\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Accept\": \"application/json\"\n                },\n                body: JSON.stringify({user_id: this.props.currentUser.id})\n            })\n            .then(res => res.json())\n            .then(response => {\n                console.log(response)\n                if(response.error){\n                    new Noty({  \n                        text: `${response.error}`,\n                        layout: \"bottomRight\",\n                        type: \"alert\",\n                        timeout: 5000,\n                        progressBar: false,\n                        closeWith: [\"click\", \"button\"]\n                    }).show()\n                } else {\n                    this.props.updatePortfolio(response)\n                }\n            })\n        }else if(this.props.mode === \"transactions\"){\n            fetch(\"http://localhost:3000/api/v1/user_recent\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Accept\": \"application/json\"\n                },\n                body: JSON.stringify({user_id: this.props.currentUser.id})\n            })\n            .then(res => res.json())\n            .then(response => {\n                console.log(response)\n                if(response.error){\n                    new Noty({  \n                        text: `${response.error}`,\n                        layout: \"bottomRight\",\n                        type: \"alert\",\n                        timeout: 5000,\n                        progressBar: false,\n                        closeWith: [\"click\", \"button\"]\n                    }).show()\n                } else {\n                    this.props.updateTransactions(response)\n                }\n            })\n        }\n    }\n\n    render(){\n        console.log(this.props)\n        return (\n        <div className=\"stock_container\">\n            {this.props.portfolio?\n                <Fragment>\n                    {this.props.portfolio.map(stock => <Stock key={stock.ticker} stock={stock}/>)}\n                </Fragment>\n                :\n                <h1 align=\"center\">Loading...</h1>\n            }\n        </div>\n        );\n    }\n}\n\nfunction msp(state){\n    return {\n      currentUser: state.currentUser,\n      portfolio: state.portfolio\n    }\n}\n\nexport default connect(msp, { setUser, updatePortfolio, updateTransactions })(StocksContainer)"]},"metadata":{},"sourceType":"module"}