{"ast":null,"code":"var _jsxFileName = \"/Users/slavaP/Desktop/TTP/stock_portfolio_frontend/src/Portfolio.js\";\nimport React, { Fragment } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport { setUser, updateBalance, updatePortfolio } from './redux/actions/user_actions';\nimport Noty from 'noty';\nimport \"../node_modules/noty/lib/noty.css\";\nimport \"../node_modules/noty/lib/themes/mint.css\";\nimport StocksContainer from './StocksContainer';\n\nclass Portfolio extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ticker: \"\",\n      quantity: \"\",\n      current_buy: {}\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      let qtyRegex = /^[1-9]\\d*$/;\n\n      if (qtyRegex.test(e.target[1].value)) {\n        fetch(\"http://localhost:3000/api/v1/search\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n          },\n          body: JSON.stringify({ ...this.state,\n            user_balance: this.props.currentUser.balance\n          })\n        }).then(res => res.json()).then(response => {\n          console.log(response);\n\n          if (response.error) {\n            new Noty({\n              text: `${response.error}`,\n              layout: \"bottomRight\",\n              type: \"alert\",\n              timeout: 5000,\n              progressBar: false,\n              closeWith: [\"click\", \"button\"]\n            }).show();\n          } else {\n            this.setState({\n              current_buy: {\n                stock_info: response.stock_info,\n                new_balance: response.new_balance\n              }\n            });\n            let notif = new Noty({\n              text: `${response.message}`,\n              layout: \"bottomRight\",\n              buttons: [Noty.button('YES', 'btn btn-success', () => this.handleConfirmation(notif)), Noty.button('NO', 'btn btn-error', function () {\n                notif.close();\n              })]\n            }).show();\n          }\n        });\n      } else {\n        new Noty({\n          text: `Quantity should be a whole positive number`,\n          layout: \"bottomRight\",\n          type: \"alert\",\n          timeout: 5000,\n          progressBar: false,\n          closeWith: [\"click\", \"button\"]\n        }).show();\n      }\n    };\n\n    this.handleConfirmation = notif => {\n      fetch(\"http://localhost:3000/api/v1/user_stocks\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user_id: this.props.currentUser.id,\n          ticker: this.state.ticker.toUpperCase(),\n          quantity: this.state.quantity,\n          price: this.state.current_buy.stock_info.latestPrice,\n          status: \"BUY\"\n        })\n      }).then(res => res.json()).then(response => {\n        if (response.errors) {\n          response.errors.forEach(error => {\n            new Noty({\n              text: `${error}`,\n              layout: \"bottomRight\",\n              type: \"alert\",\n              timeout: 5000,\n              progressBar: false,\n              closeWith: [\"click\", \"button\"]\n            }).show();\n          });\n        } else {\n          fetch(\"http://localhost:3000/api/v1/user_all\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            body: JSON.stringify({\n              user_id: this.props.currentUser.id\n            })\n          }).then(res => res.json()).then(resp => {\n            if (resp.error) {\n              new Noty({\n                text: `${resp.error}`,\n                layout: \"bottomRight\",\n                type: \"alert\",\n                timeout: 5000,\n                progressBar: false,\n                closeWith: [\"click\", \"button\"]\n              }).show();\n            } else {\n              this.props.updatePortfolio(resp);\n            }\n          });\n          new Noty({\n            text: `Successfully bought ${this.state.quantity} stocks of ${this.state.ticker}`,\n            layout: \"bottomRight\",\n            type: \"success\",\n            timeout: 5000,\n            progressBar: false,\n            closeWith: [\"click\", \"button\"]\n          }).show();\n        }\n      });\n      fetch(`http://localhost:3000/api/v1/users/${this.props.currentUser.id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n          balance: this.state.current_buy.new_balance\n        })\n      }).then(res => res.json()).then(response => {\n        if (response.errors) {\n          response.errors.forEach(error => {\n            new Noty({\n              text: `${error}`,\n              layout: \"bottomRight\",\n              type: \"alert\",\n              timeout: 5000,\n              progressBar: false,\n              closeWith: [\"click\", \"button\"]\n            }).show();\n          });\n        } else {\n          this.props.updateBalance(response.new_balance);\n          notif.close();\n        }\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"portfolio_main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"stocks_info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(StocksContainer, {\n      mode: \"portfolio\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"buy_info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"buy_form\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"form_name\",\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Cash - $\", this.props.currentUser.balance), React.createElement(\"input\", {\n      className: \"input\",\n      style: {\n        margin: \"10px auto\"\n      },\n      type: \"text\",\n      name: \"ticker\",\n      value: this.state.ticker,\n      onChange: this.handleChange,\n      placeholder: \"Ticker\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"input\",\n      style: {\n        margin: \"10px auto\"\n      },\n      type: \"text\",\n      name: \"quantity\",\n      value: this.state.quantity,\n      onChange: this.handleChange,\n      placeholder: \"Qty.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"submit_button\",\n      style: {\n        margin: \"10%\"\n      },\n      type: \"submit\",\n      value: \"Buy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nfunction msp(state) {\n  return {\n    currentUser: state.currentUser\n  };\n}\n\nexport default connect(msp, {\n  setUser,\n  updateBalance,\n  updatePortfolio\n})(Portfolio);","map":{"version":3,"sources":["/Users/slavaP/Desktop/TTP/stock_portfolio_frontend/src/Portfolio.js"],"names":["React","Fragment","Redirect","connect","setUser","updateBalance","updatePortfolio","Noty","StocksContainer","Portfolio","Component","state","ticker","quantity","current_buy","handleChange","event","setState","target","name","value","handleSubmit","e","preventDefault","qtyRegex","test","fetch","method","headers","body","JSON","stringify","user_balance","props","currentUser","balance","then","res","json","response","console","log","error","text","layout","type","timeout","progressBar","closeWith","show","stock_info","new_balance","notif","message","buttons","button","handleConfirmation","close","user_id","id","toUpperCase","price","latestPrice","status","errors","forEach","resp","render","margin","msp"],"mappings":"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","sourcesContent":["import React, {Fragment} from \"react\";\nimport { Redirect } from \"react-router-dom\"\nimport { connect } from 'react-redux'\nimport { setUser, updateBalance, updatePortfolio } from './redux/actions/user_actions'\n\nimport Noty from 'noty';  \nimport \"../node_modules/noty/lib/noty.css\";  \nimport \"../node_modules/noty/lib/themes/mint.css\";\n\nimport StocksContainer from './StocksContainer'\n\nclass Portfolio extends React.Component{\n    state = {\n        ticker: \"\",\n        quantity: \"\",\n        current_buy: {}\n    }\n\n    handleChange = (event) => {\n        this.setState({\n          [event.target.name]: event.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        let qtyRegex = /^[1-9]\\d*$/\n        if(qtyRegex.test(e.target[1].value)){\n            fetch(\"http://localhost:3000/api/v1/search\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Accept\": \"application/json\"\n                },\n                body: JSON.stringify({...this.state, user_balance: this.props.currentUser.balance})\n            })\n            .then(res => res.json())\n            .then(response => {\n                console.log(response)\n                if(response.error){\n                    new Noty({  \n                        text: `${response.error}`,\n                        layout: \"bottomRight\",\n                        type: \"alert\",\n                        timeout: 5000,\n                        progressBar: false,\n                        closeWith: [\"click\", \"button\"]\n                    }).show()\n                } else {\n                    this.setState({\n                        current_buy: {\n                            stock_info: response.stock_info,\n                            new_balance: response.new_balance\n                        }\n                    })\n                    let notif = new Noty({  \n                        text: `${response.message}`,\n                        layout: \"bottomRight\",\n                        buttons: [\n                            Noty.button('YES', 'btn btn-success', () => this.handleConfirmation(notif)),\n                            Noty.button('NO', 'btn btn-error', function () {notif.close()})\n                          ]\n                      }).show()\n                }\n            })\n        }else{\n            new Noty({  \n                text: `Quantity should be a whole positive number`,\n                layout: \"bottomRight\",\n                type: \"alert\",\n                timeout: 5000,\n                progressBar: false,\n                closeWith: [\"click\", \"button\"]\n            }).show()\n        }\n    }\n\n    handleConfirmation = (notif) => {\n        fetch(\"http://localhost:3000/api/v1/user_stocks\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            body: JSON.stringify({\n                user_id: this.props.currentUser.id,\n                ticker: this.state.ticker.toUpperCase(),\n                quantity: this.state.quantity,\n                price: this.state.current_buy.stock_info.latestPrice,\n                status: \"BUY\"\n            })\n        })\n        .then(res => res.json())\n        .then(response => {\n            if(response.errors){\n                response.errors.forEach(error => {\n                    new Noty({  \n                        text: `${error}`,\n                        layout: \"bottomRight\",\n                        type: \"alert\",\n                        timeout: 5000,\n                        progressBar: false,\n                        closeWith: [\"click\", \"button\"]\n                    }).show()\n                });\n            } else {\n                fetch(\"http://localhost:3000/api/v1/user_all\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"Accept\": \"application/json\"\n                    },\n                    body: JSON.stringify({user_id: this.props.currentUser.id})\n                })\n                .then(res => res.json())\n                .then(resp => {\n                    if(resp.error){\n                        new Noty({  \n                            text: `${resp.error}`,\n                            layout: \"bottomRight\",\n                            type: \"alert\",\n                            timeout: 5000,\n                            progressBar: false,\n                            closeWith: [\"click\", \"button\"]\n                        }).show()\n                    } else {\n                        this.props.updatePortfolio(resp)\n                    }\n                })\n                new Noty({  \n                    text: `Successfully bought ${this.state.quantity} stocks of ${this.state.ticker}`,\n                    layout: \"bottomRight\",\n                    type: \"success\",\n                    timeout: 5000,\n                    progressBar: false,\n                    closeWith: [\"click\", \"button\"]\n                }).show()\n            }\n        })\n        fetch(`http://localhost:3000/api/v1/users/${this.props.currentUser.id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            body: JSON.stringify({\n                balance: this.state.current_buy.new_balance\n            })\n        })\n        .then(res => res.json())\n        .then(response => {\n            if(response.errors){\n                response.errors.forEach(error => {\n                    new Noty({  \n                        text: `${error}`,\n                        layout: \"bottomRight\",\n                        type: \"alert\",\n                        timeout: 5000,\n                        progressBar: false,\n                        closeWith: [\"click\", \"button\"]\n                    }).show()\n                });\n            } else {\n                this.props.updateBalance(response.new_balance)\n                notif.close()\n            }\n        })\n    }\n\n    render(){\n        return (\n            <Fragment>\n                <div className=\"portfolio_main\">\n                    <div className=\"stocks_info\">\n                        <StocksContainer mode={\"portfolio\"} />\n                    </div>\n                    <div className=\"buy_info\">\n                        <form className=\"buy_form\" onSubmit={this.handleSubmit}>\n                        <p className=\"form_name\" align=\"center\" >Cash - ${this.props.currentUser.balance}</p>\n                            <input \n                                className=\"input\"\n                                style={{margin: \"10px auto\"}}\n                                type=\"text\" \n                                name=\"ticker\" \n                                value={this.state.ticker} \n                                onChange={this.handleChange} \n                                placeholder=\"Ticker\" \n                            />\n                            <input \n                                className=\"input\"\n                                style={{margin: \"10px auto\"}} \n                                type=\"text\"\n                                name=\"quantity\" \n                                value={this.state.quantity} \n                                onChange={this.handleChange} \n                                placeholder=\"Qty.\" \n                            />\n                            <input \n                                className=\"submit_button\" \n                                style={{margin: \"10%\"}}\n                                type=\"submit\" \n                                value=\"Buy\" \n                            />\n                        </form>\n                    </div>\n                </div>\n            </Fragment>\n        );\n    }\n}\n\nfunction msp(state){\n    return {\n      currentUser: state.currentUser\n    }\n  }\n  \n  export default connect(msp, {setUser, updateBalance, updatePortfolio})(Portfolio)\n"]},"metadata":{},"sourceType":"module"}