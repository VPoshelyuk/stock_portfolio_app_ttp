{"ast":null,"code":"var _jsxFileName = \"/Users/slavaP/Desktop/labs/=MOD4/practice/src/CardsContainer.js\";\nimport React, { Fragment } from \"react\";\nimport { Redirect } from 'react-router-dom';\nimport Card from './Card';\nexport default class CardsContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      nearestEvents: [],\n      loaded: false,\n      clicked: false\n    };\n  }\n\n  componentDidMount() {\n    switch (this.props.id) {\n      case 0:\n        fetch(\"http://localhost:3000/api/v1/nearest\", {\n          method: \"POST\",\n          headers: {\n            \"accepts\": \"application/json\",\n            \"content-type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            latitude: this.props.lat,\n            longitude: this.props.long\n          })\n        }).then(resp => resp.json()).then(data => {\n          this.setState({\n            nearestEvents: dat !== undefined ? data.Events.Event.slice(0, 5) : [],\n            loaded: true\n          });\n          if (data.Events.Event !== undefined && data.Events.Event.length > 4) this.props.setAllChoosenEvents(data.Events.Event);\n        });\n        break;\n\n      case 1:\n        const options = {\n          enableHighAccuracy: true,\n          timeout: 10000,\n          maximumAge: 0\n        };\n\n        const success = pos => {\n          const crd = pos.coords;\n          fetch(\"http://localhost:3000/api/v1/nearest\", {\n            method: \"POST\",\n            headers: {\n              \"accepts\": \"application/json\",\n              \"content-type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              latitude: crd.latitude,\n              longitude: crd.longitude\n            })\n          }).then(resp => resp.json()).then(data => {\n            this.setState({\n              nearestEvents: data.Events !== undefined ? data.Events.Event.slice(0, 5) : [],\n              loaded: true\n            });\n            if (data.Events.Event !== undefined && data.Events.Event.length > 4) this.props.setAllNearesEvents(data.Events.Event);\n            this.props.setMyCoords(crd.latitude, crd.longitude);\n          });\n        };\n\n        const error = err => {\n          console.warn(\"ERROR(\".concat(err.code, \"): \").concat(err.message));\n        };\n\n        navigator.geolocation.getCurrentPosition(success, error, options);\n        break;\n\n      case 2:\n        fetch(\"http://localhost:3000/api/v1/free\").then(resp => resp.json()).then(data => {\n          this.setState({\n            nearestEvents: data.Events !== undefined ? data.Events.Event.slice(0, 5) : [],\n            loaded: true\n          });\n          if (data.Events.Event !== undefined && data.Events.Event.length > 4) this.props.setAllFreeEvents(data.Events.Event);\n        });\n        break;\n\n      case 3:\n        fetch(\"http://localhost:3000/api/v1/nearest\", {\n          method: \"POST\",\n          headers: {\n            \"accepts\": \"application/json\",\n            \"content-type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            latitude: this.props.lat,\n            longitude: this.props.long\n          })\n        }).then(resp => resp.json()).then(data => {\n          this.setState({\n            nearestEvents: data.Events !== undefined ? data.Events.Event.slice(0, 5) : [],\n            loaded: true\n          });\n          if (data.Events.Event !== undefined && data.Events.Event.length > 4) this.props.setAllRandEvents(data.Events.Event);\n        });\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.props.id === 0) {\n      fetch(\"http://localhost:3000/api/v1/nearest\", {\n        method: \"POST\",\n        headers: {\n          \"accepts\": \"application/json\",\n          \"content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          latitude: this.props.lat,\n          longitude: this.props.long\n        })\n      }).then(resp => resp.json()).then(data => {\n        this.setState({\n          nearestEvents: data.Events.Event !== undefined ? data.Events.Event.slice(0, 5) : [],\n          loaded: true\n        });\n        if (data.Events.Event !== undefined && data.Events.Event.length > 4) this.props.setAllChoosenEvents(data.Events.Event);\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, this.state.loaded ? React.createElement(\"div\", {\n      className: \"cards\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, !this.state.clicked ? React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, this.state.nearestEvents !== undefined ? this.state.nearestEvents.map(event => React.createElement(Card, {\n      key: event.Name,\n      event: event,\n      chooseEvent: this.props.chooseEvent,\n      cardClicked: this.props.cardClicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    })) : null, this.state.nearestEvents.length > 0 ? this.state.nearestEvents.length > 4 ? React.createElement(\"p\", {\n      onClick: () => {\n        this.props.setContainerId(this.props.id);\n        this.setState({\n          clicked: true\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Show me more!\") : null : React.createElement(\"p\", {\n      style: {\n        paddingLeft: \"40px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"No events to show, sorry!\")) : React.createElement(Redirect, {\n      to: \"/events\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Loading...\")));\n  }\n\n}","map":{"version":3,"sources":["/Users/slavaP/Desktop/labs/=MOD4/practice/src/CardsContainer.js"],"names":["React","Fragment","Redirect","Card","CardsContainer","Component","state","nearestEvents","loaded","clicked","componentDidMount","props","id","fetch","method","headers","body","JSON","stringify","latitude","lat","longitude","long","then","resp","json","data","setState","dat","undefined","Events","Event","slice","length","setAllChoosenEvents","options","enableHighAccuracy","timeout","maximumAge","success","pos","crd","coords","setAllNearesEvents","setMyCoords","error","err","console","warn","code","message","navigator","geolocation","getCurrentPosition","setAllFreeEvents","setAllRandEvents","componentDidUpdate","render","map","event","Name","chooseEvent","cardClicked","setContainerId","paddingLeft"],"mappings":"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","sourcesContent":["import React, {Fragment} from \"react\";\nimport { Redirect } from 'react-router-dom'\nimport Card from './Card'\n\nexport default class CardsContainer extends React.Component{\n    state = {\n        nearestEvents: [],\n        loaded: false,\n        clicked: false\n    }\n\n    componentDidMount(){\n        switch (this.props.id) {\n            case 0:\n                fetch(`http://localhost:3000/api/v1/nearest`,{\n                    method: \"POST\",\n                    headers:{\n                        \"accepts\": \"application/json\",\n                        \"content-type\": \"application/json\"\n                    },\n                    body:JSON.stringify({\n                        latitude: this.props.lat,\n                        longitude: this.props.long\n                    })\n                })\n                .then(resp => resp.json())\n                .then(data => {\n                    this.setState({\n                        nearestEvents: dat !== undefined  ? data.Events.Event.slice(0, 5) : [], loaded: true})\n                    if(data.Events.Event !== undefined && data.Events.Event.length > 4)this.props.setAllChoosenEvents(data.Events.Event)\n                })\n                break;\n            case 1:\n                const options = {\n                    enableHighAccuracy: true,\n                    timeout: 10000,\n                    maximumAge: 0\n                }\n                const success = pos => {\n                    const crd = pos.coords;\n                    fetch(`http://localhost:3000/api/v1/nearest`,{\n                        method: \"POST\",\n                        headers:{\n                            \"accepts\": \"application/json\",\n                            \"content-type\": \"application/json\"\n                        },\n                        body:JSON.stringify({\n                            latitude: crd.latitude,\n                            longitude: crd.longitude\n                        })\n                    })\n                    .then(resp => resp.json())\n                    .then(data => {\n                        this.setState({\n                            nearestEvents: data.Events !== undefined  ? data.Events.Event.slice(0, 5) : [], loaded: true})\n                        if(data.Events.Event !== undefined && data.Events.Event.length > 4)this.props.setAllNearesEvents(data.Events.Event)\n                        this.props.setMyCoords(crd.latitude, crd.longitude)\n                    })\n                }\n                const error = err => {\n                    console.warn(`ERROR(${err.code}): ${err.message}`);\n                }\n                \n                navigator.geolocation.getCurrentPosition(success, error, options);\n                break;\n            case 2:\n                fetch(`http://localhost:3000/api/v1/free`)\n                .then(resp => resp.json())\n                .then(data => {\n                    this.setState({\n                        nearestEvents: data.Events !== undefined  ? data.Events.Event.slice(0, 5) : [], loaded: true})\n                    if(data.Events.Event !== undefined && data.Events.Event.length > 4)this.props.setAllFreeEvents(data.Events.Event)\n                })\n                break;\n            case 3:\n                fetch(`http://localhost:3000/api/v1/nearest`,{\n                    method: \"POST\",\n                    headers:{\n                        \"accepts\": \"application/json\",\n                        \"content-type\": \"application/json\"\n                    },\n                    body:JSON.stringify({\n                        latitude: this.props.lat,\n                        longitude: this.props.long\n                    })\n                })\n                .then(resp => resp.json())\n                .then(data => {\n                    this.setState({\n                        nearestEvents: data.Events !== undefined  ? data.Events.Event.slice(0, 5) : [], loaded: true})\n                    if(data.Events.Event !== undefined && data.Events.Event.length > 4)this.props.setAllRandEvents(data.Events.Event)\n                })\n                break;\n            default:\n                break;\n        }\n    } \n\n    componentDidUpdate(){\n        if(this.props.id === 0){\n            fetch(`http://localhost:3000/api/v1/nearest`,{\n                method: \"POST\",\n                headers:{\n                    \"accepts\": \"application/json\",\n                    \"content-type\": \"application/json\"\n                },\n                body:JSON.stringify({\n                    latitude: this.props.lat,\n                    longitude: this.props.long\n                })\n            })\n            .then(resp => resp.json())\n            .then(data => {\n                this.setState({\n                    nearestEvents: data.Events.Event !== undefined  ? data.Events.Event.slice(0, 5) : [], loaded: true})\n                if(data.Events.Event !== undefined && data.Events.Event.length > 4)this.props.setAllChoosenEvents(data.Events.Event)\n            })\n        }\n    }\n\n    render(){\n        return (\n            <div>   \n                {this.state.loaded ?\n                <div className=\"cards\">\n                    {!this.state.clicked ?\n                        <Fragment>\n                        {this.state.nearestEvents !== undefined ? this.state.nearestEvents.map(event => <Card key={event.Name} event={event} chooseEvent={this.props.chooseEvent} cardClicked={this.props.cardClicked} />) : null}\n                        {\n                            this.state.nearestEvents.length > 0 ?\n                                this.state.nearestEvents.length > 4 ?\n                                    <p onClick={()=>{this.props.setContainerId(this.props.id); this.setState({clicked: true})}} >Show me more!</p>\n                                :\n                                    null\n                            :\n                                <p style={{paddingLeft: \"40px\"}}>No events to show, sorry!</p>\n                        }\n                        </Fragment>\n                        :\n                        <Redirect to=\"/events\" />\n                    }\n                </div>\n                :\n                <div>\n                    <h1>Loading...</h1>\n                </div>\n                    \n            \n                }\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}